## Create Database

CREATE DATABASE CSResearchPapers;

USE CSResearchPapers;


## Tables

DROP TABLE IF EXISTS AuthorTable;
CREATE TABLE AuthorTable (
  AuthorID VARCHAR(20) NOT NULL,
  AuthorName VARCHAR(500) NOT NULL,
  CONSTRAINT pk_AuthorTable PRIMARY KEY(AuthorID)
);

DROP TABLE IF EXISTS AffiliationTable;
CREATE TABLE AffiliationTable (
  AffiliationID VARCHAR(20) NOT NULL,
  Affiliation VARCHAR(500) NOT NULL,
  Place VARCHAR(200) NOT NULL,
  CONSTRAINT pk_AffiliationTable PRIMARY KEY(AffiliationID)
);


DROP TABLE IF EXISTS PaperTable;
CREATE TABLE PaperTable (
  PaperID VARCHAR(20) NOT NULL,
  PaperName VARCHAR(500) NOT NULL,
  CONSTRAINT pk_PaperTable PRIMARY KEY(PaperID)
); 

DROP TABLE IF EXISTS ConferenceTable;
CREATE TABLE ConferenceTable (
  ConferenceID VARCHAR(20) NOT NULL,
  ConferenceName VARCHAR(500) NOT NULL,
  ConferenceYear INTEGER NOT NULL,
  CONSTRAINT pk_ConferenceTable PRIMARY KEY(ConferenceID)
); 

DROP TABLE IF EXISTS FieldOfStudy;
CREATE TABLE FieldOfStudy (
  FieldID VARCHAR(20) NOT NULL,
  FieldName VARCHAR(500) NOT NULL,
  CONSTRAINT pk_FieldOfStudy PRIMARY KEY(FieldID)
);


## Weak Relation

DROP TABLE IF EXISTS FieldOfStudy;
CREATE TABLE FieldOfStudy (
  FieldID VARCHAR(20) NOT NULL,
  FieldName VARCHAR(500) NOT NULL,
  CONSTRAINT pk_FieldOfStudy PRIMARY KEY(FieldID)
);


DROP TABLE IF EXISTS KeywordTable;
CREATE TABLE KeywordTable (
  KeywordID VARCHAR(20) NOT NULL,
  Keyword VARCHAR(500) NOT NULL,
  CONSTRAINT pk_KeywordTable PRIMARY KEY(KeywordID)
);

DROP TABLE IF EXISTS PaperSummary;
CREATE TABLE PaperSummary (
  PaperID VARCHAR(20) NOT NULL,
  Summary VARCHAR(6000) NOT NULL,
  CONSTRAINT fk_PaperSummary_PaperTable_PaperID FOREIGN KEY(PaperID) REFERENCES PaperTable(PaperID),
  PRIMARY KEY(PaperID)
);





## Relationships

DROP TABLE IF EXISTS AuthorWritesPaper;
CREATE TABLE AuthorWritesPaper (
  AuthorID VARCHAR(20) NOT NULL,
  PaperID VARCHAR(20) NOT NULL,
  CONSTRAINT fk_AuthorWritesPaper_AuthorTable_AuthorID FOREIGN KEY(AuthorID) REFERENCES AuthorTable(AuthorID),
  CONSTRAINT fk_AuthorWritesPaper_PaperTable_PaperID FOREIGN KEY(PaperID) REFERENCES PaperTable(PaperID),
  PRIMARY KEY(AuthorID, PaperID)
);


DROP TABLE IF EXISTS PaperPublishedInConference;
CREATE TABLE PaperPublishedInConference (
  PaperID VARCHAR(20) NOT NULL,
  ConferenceID VARCHAR(20) NOT NULL,
  CONSTRAINT fk_PaperPublishedInConference_ConferenceTable_ConferenceID FOREIGN KEY(ConferenceID) REFERENCES ConferenceTable(ConferenceID),
  CONSTRAINT fk_PaperPublishedInConference_PaperTable_PaperID FOREIGN KEY(PaperID) REFERENCES PaperTable(PaperID),
  PRIMARY KEY(ConferenceID, PaperID)
);

DROP TABLE IF EXISTS Paper1CitesPaper2;
CREATE TABLE Paper1CitesPaper2 (
  Paper1ID VARCHAR(20) NOT NULL,
  Paper2ID VARCHAR(20) NOT NULL,
  CONSTRAINT fk_Paper1CitesPaper2_PaperTable_Paper1ID FOREIGN KEY(Paper1ID) REFERENCES PaperTable(PaperID),
  CONSTRAINT fk_Paper1CitesPaper2_PaperTable_Paper2ID FOREIGN KEY(Paper2ID) REFERENCES PaperTable(PaperID),
  PRIMARY KEY(Paper1ID, Paper2ID)
);

DROP TABLE IF EXISTS AffiliationOfAuthor;
CREATE TABLE AffiliationOfAuthor (
  AuthorID VARCHAR(20) NOT NULL,
  AffiliationID VARCHAR(20) NOT NULL,
  CONSTRAINT fk_AffiliationOfAuthor_AuthorTable_AuthorID FOREIGN KEY(AuthorID) REFERENCES AuthorTable(AuthorID),
  CONSTRAINT fk_AffiliationOfAuthor_AffiliationTable_AffiliationID FOREIGN KEY(AffiliationID) REFERENCES AffiliationTable(AffiliationID),
  PRIMARY KEY(AuthorID, AffiliationID)
);


DROP TABLE IF EXISTS ScopeOfConference;
CREATE TABLE ScopeOfConference (
  ConferenceID VARCHAR(20) NOT NULL,
  FieldID VARCHAR(20) NOT NULL,
  CONSTRAINT fk_ScopeOfConference_ConferenceTable_ConferenceID FOREIGN KEY(ConferenceID) REFERENCES ConferenceTable(ConferenceID),
  CONSTRAINT fk_ScopeOfConference_FieldOfStudy_FieldID FOREIGN KEY(FieldID) REFERENCES FieldOfStudy(FieldID),
  PRIMARY KEY(ConferenceID, FieldID)
);


DROP TABLE IF EXISTS PaperBelongsToScope;
CREATE TABLE PaperBelongsToScope (
  PaperID VARCHAR(20) NOT NULL,
  FieldID VARCHAR(20) NOT NULL,
  CONSTRAINT fk_PaperBelongsToScope_PaperTable_PaperID FOREIGN KEY(PaperID) REFERENCES PaperTable(PaperID),
  CONSTRAINT fk_PaperBelongsToScope_FieldOfStudy_FieldID FOREIGN KEY(FieldID) REFERENCES FieldOfStudy(FieldID),
  PRIMARY KEY(PaperID, FieldID)
);

DROP TABLE IF EXISTS AuthorInterestedInField;
CREATE TABLE AuthorInterestedInField (
  AuthorID VARCHAR(20) NOT NULL,
  FieldID VARCHAR(20) NOT NULL,
  CONSTRAINT fk_AuthorInterestedInField_AuthorTable_AuthorID FOREIGN KEY(AuthorID) REFERENCES AuthorTable(AuthorID),
  CONSTRAINT fk_AuthorInterestedInField_FieldOfStudy_FieldID FOREIGN KEY(FieldID) REFERENCES FieldOfStudy(FieldID),
  PRIMARY KEY(AuthorID, FieldID)
);


DROP TABLE IF EXISTS KeywordsInPaper;
CREATE TABLE KeywordsInPaper (
PaperID VARCHAR(20) NOT NULL,
KeywordID VARCHAR(20) NOT NULL,
CONSTRAINT fk_KeywordsInPaper_PaperTable_PaperID FOREIGN KEY(PaperID) REFERENCES PaperTable(PaperID),
CONSTRAINT fk_KeywordsInPaper_KeywordTable_KeywordID FOREIGN KEY(KeywordID) REFERENCES KeywordTable(KeywordID),
PRIMARY KEY(PaperID, KeywordID)
);


## Views

create view  AuthorID_PaperID_temp as  
select AuthorID, PaperID 
from (AuthorTable natural join AuthorWritesPaper natural join PaperTable) ;



create view PaperID_Year as 
select  PaperID,ConferenceID,ConferenceYear 
from (PaperTable natural join PaperPublishedInConference natural join ConferenceTable);


create view authorID_sorted_by_Paper_Count as 
select AuthorID,count(PaperID) as Paper_count 
from AuthorID_PaperID_temp 
group by AuthorID  
order by count(PaperID) desc ;


create view authorID_sorted_by_citations as 
select AuthorID , count(Paper1ID) as citation_count
from AuthorID_PaperID_temp, Paper1CitesPaper2 
where PaperID = Paper2ID 
group by AuthorID 
order by count(Paper1ID) desc ;


create view paperID_sorted_by_citations as 
select Paper2ID,count(Paper1ID) as citation_count 
from Paper1CitesPaper2 
group by Paper2ID 
order by count(Paper1ID) desc ;

create view paperID_sorted_by_references as 
select Paper1ID,count(Paper2ID) as citation_count 
from Paper1CitesPaper2 
group by Paper1ID 
order by count(Paper2ID) desc ;
